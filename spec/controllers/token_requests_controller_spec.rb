require File.expand_path(File.join(File.dirname(__FILE__), '..', 'spec_helper'))

describe TokenRequestsController do
  include Devise::TestHelpers

  describe 'routing' do
    describe '/tokens/:token_id/token_requests' do
      it 'maps POST to the create action' do
        {:post => '/tokens/1/token_requests'}.should \
          route_to(:controller => 'token_requests', :action => 'create',
                   :token_id => '1')
      end

      it 'is generated by token_requests_path' do
        token_requests_path(1).should == '/tokens/1/token_requests'
      end
    end
  end

  shared_examples_for 'it has an index at another controller' do
    it 'and redirect to the token page' do
      get :index, :token_id => '1'
      response.should redirect_to(token_path('1'))
    end
  end

  context '(with anonymous user)' do
    it_should_behave_like 'it has an index at another controller'

    describe '#create' do
      it 'requires an authenticated user' do
        post :create, :token_id => '1'
        response.should redirect_to(new_user_session_path)
      end
    end

    describe '#destroy' do
      it 'requires an authenticated user' do
        delete :destroy, :token_id => '1', :id => '2'
        response.should redirect_to(new_user_session_path)
      end
    end
  end

  context '(with authenticated user)' do
    before(:each) do
      @user = mock_model('User')
      request.env['warden'] = stub('Warden', :authenticate => @user, :authenticate! => @user)
    end

    it_should_behave_like 'it has an index at another controller'

    describe '#create' do
      context 'with invalid data' do
        before(:each) do
          @token = mock_model('Token')
          Token.stub!(:find_by_slug! => @token)
          @token_request = mock_model('TokenRequest').as_new_record
          exception = ActiveRecord::RecordInvalid.new(@token_request)
          @token.stub!(:create_request!).and_raise(exception)
        end

        it 'renders the tokens/show template' do
          post :create, :token_id => '1'
          response.should render_template('tokens/show')
        end

        it 'assigns the specified token to the template' do
          @token = mock_model('Token')
          @token.stub!(:create_request!)
          Token.should_receive(:find_by_slug!).with('1').and_return(@token)
          post :create, :token_id => '1'
          assigns(:token).should == @token
        end

        it 'assigns the invalid token request to the template' do
          post :create, :token_id => '1'
          assigns(:new_token_request).should === @token_request
        end
      end

      context 'with valid data' do
        it 'should create a new TokenRequest associated with the specified token and current user' do
          @token = mock_model('Token')
          Token.should_receive(:find_by_slug!).with('1').and_return(@token)
          @token.should_receive(:create_request!) \
            .with("purpose" => 'Foo', "urgent" => '1', "user" => @user)
          post :create, :token_id => '1',
            :token_request => {:purpose => 'Foo', :urgent => '1'}
        end

        it 'should redirect to the token page' do
          @token = mock_model('Token')
          Token.stub!(:find_by_slug! => @token)
          @token.stub!(:create_request!)
          post :create, :token_id => '1'
          response.should redirect_to token_path(@token)
        end
      end
    end

    describe '#destroy' do
      it 'destroys the specified TokenRequest' do
        TokenRequest.should_receive(:destroy).with('1')
        delete :destroy, :token_id => 'foo', :id => '1'
      end

      it 'redirects to the token page' do
        TokenRequest.stub!(:destroy)
        delete :destroy, :token_id => 'foo', :id => '1'
        response.should redirect_to(token_path('foo'))
      end
    end
  end
end
